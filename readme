# Estudo realizado com a ferramenta SASS

Estou usando o nodeJs com o pacote global do SASS.
Estou usando a linha de comando para gerar o css compilado:

Este comando esta monitorando apenas um arquivo, porem é possivel monitorar uma pasta especifica.
Um arquivo:
sass assets/sass/base.scss assets/css/style.css --no-source-map --style compressed -w 
O -w faz com que o SASS compile o arquivo quando o mesmo e salvo e gere o css.

Uma pasta:
sass --watch assets/sass:assets/css --no-source-map --style compressed
Neste caso para cada arquivo .scss será gerado um .css


Para conhecimento tambem usei o Scout-App uma ferramenta visual para o SASS

Para mais detalhes podem acessar o site: https://sass-lang.com/
Nele contem as informações detalhadas de como usar o sass.

## Partes interessantes que achei deste estudo:
O fato de poder agrupar o css ex: posso agrupar todos os elemento de um nav dentro dela.

nav{
  css..
  ul{
    css
    li{
      css
      a{
        css
      }
    }
  } 
}

## Pré processar em um unico arquivo o nosso css final

Pré processar em um unico arquivo o nosso css final, usando varias folhas de stylo.
Para isso basta apenas usar o _ antes da nossa folha de stylo e usar o @import 'nomeDaFolha' sem u prefixo _;
Neste exemplo usamos o _reset.scss . 


## Usar Mixin seria como funções que podem ser reaproveitadas no css.

@mixin nomeDoMixin($propriedada){
  todo codigo desejado, pode
  ser partes de funcionamento
  diferentes de navegadores.
}

Para usar o mesmo seria @include nomeDoMinxin(propriedade).

## Expandindo propriedades:

Pode ser aproveitao codigo e evitar duplicidade:

%Aprovitando-codigo{
  todas as propriedades desejadas
}

Para reaprovitar:
.onde-desejar{
  @extend %Aproveitando-codigo;
  demais propriedades
}

## Operações matematicas podem ser efetuadas tambem.

Para ex: foi criado 2 div um tem o tamanho fixo e a outra sempre o dobro.
 $item-width: 100px;
 .item{
  width: $item-width;
 }
 .item-duplo{
  width: $item-width * 2;
 }